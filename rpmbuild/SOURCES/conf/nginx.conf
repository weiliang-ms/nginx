worker_processes  auto;

#worker_cpu_affinity 1000 0100 0010 0001;

user root;

#worker_rlimit_nofile 409600;

events {
use epoll;

worker_connections 10240;

}

http {

	include       mime.types;

	client_max_body_size    50m;

	client_body_buffer_size 128k;
	
	client_header_buffer_size 512k;

    large_client_header_buffers 4 512k;

	default_type  application/octet-stream;
    
	#web security
	#include ../naxsi/naxsi_core.rules;
	#waf
	lua_package_path "/opt/nginx/conf/waf/?.lua";
	lua_shared_dict limit 10m;
	init_by_lua_file  conf/waf/init.lua;
	access_by_lua_file conf/waf/access.lua;	

	proxy_cache_path ../cache levels=1:2 keys_zone=cache:100m inactive=7d max_size=1000g;

	#只记录非2xx 3xx请求	
	map $status $error_codes { default   1;~^[23]    0;}

	log_format  main  '"upstream_addr":"$upstream_addr" "upstream_response_time":$upstream_response_time "remote_addr":"$remote_addr" "time_local":"$time_local" "http status":$status "http_referer":"$http_referer" "http_user_agent":"$http_user_agent" "http_x_forwarded_for":"$http_x_forwarded_for" "request":"$request_uri" "request_method":"$request_method" "sessionid":"$cookie_SESSION" "Host": "$http_host"';

	log_format  json  '{"upstream_addr":"$upstream_addr","upstream_response_time":$upstream_response_time,"remote_addr":"$remote_addr","remote_user":"$remote_user","time_local":"$time_local","status":$status,"body_bytes_sent":$body_bytes_sent,"http_referer":"$http_referer","http_user_agent":"$http_user_agent","http_x_forwarded_for":"$http_x_forwarded_for","request":"$request_uri","request_method":"$request_method","hostname":"$hostname","sessionid":"$cookie_SESSION"}';

	#access_log  logs/access.log  main;
	access_log  logs/access.log  main if=$error_codes;		
	
	log_not_found off;
	#开启高效文件传输模式，sendfile 指令指定 Nginx 是否调用sendfile 函数来输出文件，
	#对于普通应用设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，
	#以平衡磁盘与网络 I/O 处理速度，降低系统的负载。
	sendfile        on;

	#告诉 Nginx 在一个数据包里发送所有头文件，而不一个接一个的发送
	tcp_nopush     on;

	#告诉 Nginx 不要缓存数据，而是一段一段的发送--当需要及时发送数据时
	#，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。
	#Nginx 默认会始终工作在 tcp nopush 状态下。但是当开启前面的 sendfile on; 时，
	#它的工作特点是 nopush 的最后一个包会自动转转换到 nopush off。
	#为了减小那200ms的延迟，开启 nodelay on; 将其很快传送出去。
	#结论就是 sendfile on; 开启时，tcp_nopush 和 tcp_nodelay 都是on 是可以的。
	tcp_nodelay on;

	charset utf-8;

	server_tokens off;

	more_set_headers "Server: Unknown";
        
	absolute_redirect off;

	gzip on;
    gzip_min_length 1k;
    gzip_comp_level 1;
	gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;
    gzip_vary on;
	# 禁用客户端为 IE6 时的 gzip功能。
	gzip_disable "MSIE [1-6]\.";
	gzip_buffers 32 4k;
	gzip_http_version 1.0;

    ## 客户端与nginx间超时配置 ##
	#连接超时时间，单位是秒
    keepalive_timeout  65;
    #读取HTTP头部的超时时间，默认值 60。
    #客户端与服务器建立连接后将开始接收HTTP头部，在这个过程中，
    #如果在一个时间间隔（超时时间）内没有读取到客户端发来的字节，则认为超时，并向客户端返回408 ("Request timed out")响应。
	client_header_timeout 60;
	#该指令设置请求体（request body）的读超时时间
	client_body_timeout 60;

	include conf.d/*.conf;
	
}

stream {
    include tcp.d/*.conf;
    log_format  main  '$remote_addr - [$time_local] $connection '
                      '$status $proxy_protocol_addr $server_addr ';
    access_log  logs/tcp.log  main;
#    variables_hash_bucket_size 512;
#    server {
#        listen       443;
#        ssl_preread on;
#        proxy_pass $ssl_preread_server_name:443;
#    }
}
